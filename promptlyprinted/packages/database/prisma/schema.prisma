generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for customers and admins
model User {
  id        String      @id @default(cuid())
  clerkId   String?     @unique
  email     String      @unique
  firstName String?
  lastName  String?
  role      Role        @default(CUSTOMER)
  orders    Order[]     @relation("UserOrders")
  addresses Address[] // Relation to addresses
  wishlist  Product[]   @relation("UserWishlist") // Relation to wishlist
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Analytics Analytics[]
}

model Page {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
}

// Product model
model Product {
  id            Int         @id @default(autoincrement())
  name          String
  sku           String      @unique // Prodigi SKU
  description   String
  price         Float       // Supplier price
  customerPrice Float       // Price displayed to customers
  stock         Int         @default(0) // Number of items in stock
  currency      String      // Currency for the price (e.g., USD, GBP)
  category      Category?   @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  images        Image[]     // Relation to images
  orderItems    OrderItem[] // Relation to orders
  wishedBy      User[]      @relation("UserWishlist") // Relation to wishlist
  productType   String      // Product type, e.g., "Canvas", "Phone Case"
  listed        Boolean     @default(false) // Whether the product is listed for sale
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Category model
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[] // Relation to products
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Order model
model Order {
  id             Int         @id @default(autoincrement())
  prodigiOrderId String?     @unique // Prodigi order ID
  user           User        @relation("UserOrders", fields: [userId], references: [id])
  userId         String
  status         OrderStatus @default(PENDING)
  totalPrice     Float
  orderItems     OrderItem[] // Relation to ordered items
  payment        Payment?    @relation(fields: [paymentId], references: [id])
  paymentId      Int?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  recipient      Recipient?  // Prodigi Recipient details
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

// OrderItem model for items in an order
model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  copies    Int
  price     Float // Price at the time of purchase
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Payment model for tracking Stripe payments
model Payment {
  id        Int      @id @default(autoincrement())
  stripeId  String   @unique // Stripe PaymentIntent ID
  status    String
  amount    Float
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

// Image model for product images
model Image {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Analytics model for tracking events
model Analytics {
  id        Int      @id @default(autoincrement())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  eventName String
  eventData Json
  createdAt DateTime @default(now())
}

// Log model for observability
model Log {
  id        Int      @id @default(autoincrement())
  level     String   // E.g., "info", "error"
  message   String
  metadata  Json
  createdAt DateTime @default(now())
}

// Address model for user addresses
model Address {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  type       AddressType
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum AddressType {
  SHIPPING
  BILLING
}

model WebhookLog {
  id        String   @id @default(cuid())
  type      String
  status    String
  response  String
  createdAt DateTime @default(now())
}

// Recipient model for Prodigi API integration
model Recipient {
  id           Int      @id @default(autoincrement())
  name         String
  email        String?
  phoneNumber  String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  postalCode   String
  countryCode  String // ISO 3166-1 alpha-2 code
  order        Order?  @relation(fields: [orderId], references: [id])
  orderId      Int?    @unique
}