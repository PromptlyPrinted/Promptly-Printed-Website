generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  clerkId     String?      @unique
  email       String       @unique
  firstName   String?
  lastName    String?
  role        Role         @default(CUSTOMER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  addresses   Address[]
  Analytics   Analytics[]
  orders      Order[]      @relation("UserOrders")
  savedImages SavedImage[]
  wishlist    Product[]    @relation("UserWishlist")
  designs     Design[]

}

model Page {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                     Int          @id @default(autoincrement())
  name                   String
  sku                    String
  description            String
  price                  Float
  customerPrice          Float
  stock                  Int          @default(0)
  currency               String
  categoryId             Int?
  productType            String
  listed                 Boolean      @default(false)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  brand                  String
  color                  String[]
  countryCode            String
  edge                   String
  fulfillmentCountryCode String?
  fulfillmentLabCode     String?
  gender                 String
  height                 Float
  shippingCost           Float
  size                   String[]
  style                  String
  taxAmount              Float
  totalCost              Float
  units                  String
  width                  Float
  prodigiAttributes      Json?
  prodigiDescription     String?
  prodigiPrintAreas      Json?
  prodigiVariants        Json?
  images                 Image[]
  orderItems             OrderItem[]
  category               Category?    @relation(fields: [categoryId], references: [id])
  quotes                 Quote[]
  savedImages            SavedImage[]
  wishedBy               User[]       @relation("UserWishlist")
  designs                Design[]
  prices                 ProductPrice[]
  translations           ProductTranslation[]

  @@unique([sku, countryCode])
  @@index([countryCode])
  @@index([categoryId])
  @@index([productType])
  @@index([listed])
  @@index([createdAt])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  products    Product[]
}

model Order {
  id                 Int                    @id @default(autoincrement())
  prodigiOrderId     String?                @unique
  userId             String
  status             OrderStatus            @default(PENDING)
  totalPrice         Float
  stripeSessionId    String?
  paymentId          Int?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  callbackUrl        String?
  idempotencyKey     String?
  merchantReference  String?
  metadata           Json?
  outcome            String?
  packingSlip        String?
  prodigiCreatedAt   DateTime?
  prodigiLastUpdated DateTime?
  prodigiStage       String?
  prodigiStatusJson  Json?
  shippingMethod     ShippingMethod?
  traceParent        String?
  charges            Charge[]
  payment            Payment?               @relation(fields: [paymentId], references: [id])
  user               User                   @relation("UserOrders", fields: [userId], references: [id])
  orderItems         OrderItem[]
  prodigiErrors      OrderProcessingError[]
  recipient          Recipient?
  shipments          Shipment[]             @relation("OrderShipments")
}

model OrderItem {
  id                    Int            @id @default(autoincrement())
  orderId               Int
  productId             Int
  copies                Int            @default(1)
  price                 Float
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  assets                Json?
  attributes            Json?
  merchantReference     String?
  prodigiItemId         String?
  prodigiItemStatus     String?
  recipientCostAmount   Float?
  recipientCostCurrency String?
  sizing                String?
  customizationId       Int?
  customization         Customization? @relation(fields: [customizationId], references: [id])
  order                 Order          @relation(fields: [orderId], references: [id])
  product               Product        @relation(fields: [productId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  stripeId  String   @unique
  status    String
  amount    Float
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product? @relation(fields: [productId], references: [id])
}

model Analytics {
  id        Int      @id @default(autoincrement())
  userId    String?
  eventName String
  eventData Json
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Log {
  id        Int      @id @default(autoincrement())
  level     String
  message   String
  metadata  Json
  createdAt DateTime @default(now())
}

model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
}

model WebhookLog {
  id        String   @id @default(cuid())
  type      String
  status    String
  response  String
  createdAt DateTime @default(now())
}

model Recipient {
  id           Int     @id @default(autoincrement())
  name         String
  email        String?
  phoneNumber  String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  postalCode   String
  countryCode  String
  orderId      Int?    @unique
  order        Order?  @relation(fields: [orderId], references: [id])
}

model Charge {
  id                   Int          @id @default(autoincrement())
  prodigiChargeId      String?
  chargeType           String?
  prodigiInvoiceNumber String?
  costId               Int?
  orderId              Int
  totalCost            Cost?        @relation(fields: [costId], references: [id])
  order                Order        @relation(fields: [orderId], references: [id])
  items                ChargeItem[]
}

model ChargeItem {
  id            Int     @id @default(autoincrement())
  prodigiItemId String?
  shipmentId    String?
  costId        Int?
  chargeId      Int
  charge        Charge  @relation(fields: [chargeId], references: [id])
  cost          Cost?   @relation(fields: [costId], references: [id])
}

model Cost {
  id                 Int                @id @default(autoincrement())
  amount             String?
  currency           String?
  charges            Charge[]
  chargeItems        ChargeItem[]
  quoteItemsCosts    QuoteCostSummary[] @relation("QuoteItemsCost")
  quoteShippingCosts QuoteCostSummary[] @relation("QuoteShippingCost")
  quoteItems         QuoteItem[]
  quoteShipments     QuoteShipment[]
}

model Shipment {
  id                    Int                  @id @default(autoincrement())
  prodigiShipmentId     String?              @unique
  status                String?
  carrier               String?
  carrierService        String?
  trackingUrl           String?
  trackingNumber        String?
  dispatchDate          DateTime?
  fulfillmentLocationId Int?
  orderId               Int
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  fulfillmentLocation   FulfillmentLocation? @relation(fields: [fulfillmentLocationId], references: [id])
  order                 Order                @relation("OrderShipments", fields: [orderId], references: [id], map: "Shipment_orderId_fkey")
  items                 ShipmentItem[]

  @@index([orderId])
}

model ShipmentItem {
  id         Int      @id @default(autoincrement())
  itemId     String?
  shipmentId Int
  createdAt  DateTime @default(now())
  shipment   Shipment @relation(fields: [shipmentId], references: [id])

  @@index([shipmentId])
}

model FulfillmentLocation {
  id             Int             @id @default(autoincrement())
  countryCode    String?
  labCode        String?
  quoteShipments QuoteShipment[]
  shipments      Shipment[]
}

model Quote {
  id                     Int               @id @default(autoincrement())
  shipmentMethod         ShippingMethod?
  costSummaryId          Int?
  issues                 Json?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  currencyCode           String            @default("USD")
  destinationCountryCode String
  outcome                String?
  productId              Int?
  costSummary            QuoteCostSummary? @relation(fields: [costSummaryId], references: [id])
  product                Product?          @relation(fields: [productId], references: [id])
  items                  QuoteItem[]
  shipments              QuoteShipment[]
}

model QuoteCostSummary {
  id             Int     @id @default(autoincrement())
  itemsCostId    Int?
  shippingCostId Int?
  quotes         Quote[]
  items          Cost?   @relation("QuoteItemsCost", fields: [itemsCostId], references: [id])
  shipping       Cost?   @relation("QuoteShippingCost", fields: [shippingCostId], references: [id])
}

model QuoteShipment {
  id                    Int                  @id @default(autoincrement())
  carrierName           String?
  carrierService        String?
  costId                Int?
  fulfillmentLocationId Int?
  itemIds               Json?
  quoteId               Int
  cost                  Cost?                @relation(fields: [costId], references: [id])
  fulfillmentLocation   FulfillmentLocation? @relation(fields: [fulfillmentLocationId], references: [id])
  quote                 Quote                @relation(fields: [quoteId], references: [id])
}

model QuoteItem {
  id         Int     @id @default(autoincrement())
  quoteId    Int
  itemId     String?
  sku        String
  copies     Int
  costId     Int?
  attributes Json?
  assets     Json?
  unitCost   Cost?   @relation(fields: [costId], references: [id])
  quote      Quote   @relation(fields: [quoteId], references: [id])
}

model ProdigiCallbackEvent {
  id              String    @id @default(cuid())
  outcome         String?
  traceParent     String?
  eventId         String?
  specVersion     String?
  eventType       String?
  source          String?
  subject         String?
  dataContentType String?
  occurredAt      DateTime?
  data            Json?
  createdAt       DateTime  @default(now())
}

model ShippingPrice {
  id                  Int            @id @default(autoincrement())
  method              ShippingMethod
  basePrice           Float
  additionalItemPrice Float
  currency            String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@unique([method, currency])
}

model SavedImage {
  id        String   @id @default(cuid())
  url       String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  designs   Design[]

  @@index([userId])
  @@index([productId])
}

model Design {
  id           Int        @id @default(autoincrement())
  name         String
  userId       String
  productId    Int
  savedImageId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user         User       @relation(fields: [userId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])
  savedImage   SavedImage @relation(fields: [savedImageId], references: [id])

  @@index([userId])
  @@index([productId])
  @@index([savedImageId])
}

model Customization {
  id         Int         @id @default(autoincrement())
  artworkUrl String
  mockupUrl  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
}

model OrderProcessingError {
  id          Int       @id @default(autoincrement())
  orderId     Int
  error       String
  retryCount  Int
  lastAttempt DateTime?
  createdAt   DateTime  @default(now())
  resolvedAt  DateTime?
  resolvedBy  String?
  resolution  String?
  order       Order     @relation(fields: [orderId], references: [id])

  @@index([orderId])
}

model ProductPrice {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  currency String
  amount   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, currency])
}

model ProductTranslation {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  languageCode String
  name        String
  description String
  features    Json?
  ecoProperties Json?
  careInstructions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, languageCode])
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ShippingMethod {
  BUDGET
  STANDARD
  EXPRESS
  OVERNIGHT
}
